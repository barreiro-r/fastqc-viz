---
title: fastqc-viz
title-block-banner: false

format:
  html:
    mainfont: "DM Sans"
   
execute: 
  warning: false
  message: false
  echo: false

sidebar: false
---

```{r}
#| label: load functions
library(tidyverse)
purrr::walk(list.files("R", pattern = "\\.R$", full.names = TRUE), source)
theme_set_fastqcviz()
```

```{r}
#| label: load and parse fasqc data
fastqc_data <-
  parse_fastqc(fastq_data_file = "output/fastqc_reports/SRR1517848_2_fastqc.txt")
```

::::::: grid-container
::: {.box .sidebox}

![](images/logo-light.svg){width=100%, id="logo"}

-------------

```{r}
#| label: Status summary
#| results: asis
plot_status_summary(fastqc_data) 

```

```{r}
#| label: Basic Statistics [title]
#| results: asis

# create_header(fastqc_data, "basic_statistics")
```

------

```{r}
#| label: Basic Statistics
#| results: asis
plot_basic_statistics(fastqc_data)
```

:::

::: box
```{r}
#| label: Per base sequence quality [title]
#| results: asis
create_header(fastqc_data, "per_base_sequence_quality")
```

```{r}
#| label: Per base sequence quality [content]
#| fig-width: 3
#| fig-height: 1.75

fqcviz_colors <- get_color_palette()

data2plot <-
  fastqc_data$per_base_sequence_quality$content |>
  separate(base, into = c('start', 'end'), sep = '-') |>
  mutate(across(c(start, end), as.numeric)) |>
  rowwise() |>
  mutate(base_numeric = mean(c(start, end), na.rm = TRUE)) |>
  mutate(my_mean = as.numeric(mean), my_median = as.numeric(median))

annotation_zone_data <-
  tibble(
    zone = c("fail", "warn", "pass"),
    my_start = c(0, 20, 28),
    my_end = c(20, 28, Inf),
    base_numeric = 0,
    my_mean = 0
  )


data2plot |>
  ggplot(aes(x = base_numeric, y = as.numeric(my_mean))) +
  ggpattern::geom_rect_pattern(
    data = subset(annotation_zone_data, zone == "fail"),
    xmin = -Inf,
    xmax = Inf,
    aes(ymin = my_start, ymax = my_end),
    alpha = 0,
    pattern_alpha = .2,
    pattern = "stripe",
    pattern_spacing = .025,
    pattern_angle = 45,
    pattern_color = fqcviz_colors$fail,
  ) +
  ggpattern::geom_rect_pattern(
    data = subset(annotation_zone_data, zone == "warn"),
    xmin = -Inf,
    xmax = Inf,
    aes(ymin = my_start, ymax = my_end),
    alpha = 0,
    pattern_alpha = .15,
    pattern = "stripe",
    pattern_spacing = .025,
    pattern_angle = 45,
    pattern_color = fqcviz_colors$warm_grey2,
  ) +
# main geometries
# boxplot whiskers
geom_ribbon(
  aes(
    x = base_numeric,
    ymin = as.numeric(x10th_percentile),
    ymax = as.numeric(x90th_percentile)
  ),
  fill = fqcviz_colors$warm_grey3,
  alpha = .1
) +
  # boxpot box
  geom_ribbon(
    aes(
      x = base_numeric,
      ymin = as.numeric(upper_quartile),
      ymax = as.numeric(lower_quartile)
    ),
    fill = fqcviz_colors$warm_grey3,
    alpha = .2
  ) +
  # boxplot median
  geom_line(
    aes(
      x = base_numeric,
      y = as.numeric(median),
      group = 1
    ),
    color = fqcviz_colors$warm_grey3,
    alpha = .4,
  ) +
  # main distribuition
  geom_line(aes(group = 1), color = fqcviz_colors$blue1) +
  scale_y_continuous(
    limits = c(0, max(as.numeric(data2plot$upper_quartile))),
    expand = expansion(mult = .15)
  ) +
  scale_x_continuous(
    expand = c(0, 0),
    breaks = as.integer(seq(1, max(data2plot$base_numeric), length.out = 5)),
    limits = c(min(data2plot$base_numeric), max(data2plot$base_numeric))
  ) +
  labs(
    x = "Read base position",
    y = "Quality"
  )




```

:::

::: box
```{r}
#| label: Per base sequence content [title]
#| results: asis
create_header(fastqc_data, "per_sequence_quality_scores")
```

```{r}
#| label: Per base sequence content [content]
#| fig-width: 3
#| fig-height: 1.75

fqcviz_colors <- get_color_palette()

data2plot <-
  fastqc_data$per_sequence_quality_scores$content |>
  mutate(
    quality = as.numeric(quality),
    count = as.numeric(count)
  )

# p1 <-
data2plot |>
  ggplot(aes(x = quality, y = count)) +
  geom_line(aes(group = 1), color = fqcviz_colors$blue1) +
  scale_y_continuous(
    labels = format_large_numbers,
    expand = expansion(mult = .15)
  ) +
  labs(
    x = "Average Quality per Read (Phred score)",
    y = "Number of Reads"
  )


```

:::

::: box
```{r}
#| label: per_base_sequence_content [title]
#| results: asis
create_header(fastqc_data, "per_base_sequence_content")
```

```{r}
#| label: per_base_sequence_content [content]
#| fig-width: 3
#| fig-height: 1.75

qcviz_colors <- get_color_palette()

data2plot <-
  fastqc_data$per_base_sequence_content$content |>
  pivot_longer(
    cols = c('a', 'c', 'g', 't'),
    names_to = "nucleotide",
    values_to = "count"
  ) |>
  mutate(
    count = as.numeric(count)
  ) |>
  separate(base, into = c('start', 'end'), sep = '-') |>
  mutate(across(c(start, end), as.numeric)) |>
  rowwise() |>
  mutate(base_numeric = mean(c(start, end), na.rm = TRUE))

data2plot |>
  ggplot(aes(x = base_numeric, y = count)) +
  geom_line(aes(color = nucleotide), linewidth = .5) +
  scale_y_continuous(
    labels = format_large_numbers,
    limits = c(0, 100),
    expand = c(0, 0)
  ) +
  scale_x_continuous(
    limits = c(0, max(data2plot$base_numeric)),
    breaks = as.integer(seq(min(data2plot$base_numeric) - 1, max(data2plot$base_numeric), length.out = 5)),
    expand = c(0, 0)
  ) +
  labs(
    x = "Position in read (bp)",
    y = "Nucleotide Fraction (%)",
    color = NULL
  ) +
  ggsci::scale_color_lancet(label = toupper) +
  theme(
    legend.position = c(0.5, 1),
    legend.justification = c(0.5, 1),
    legend.direction = "horizontal"
  )
```

:::

::: box
```{r}
#| label: Per sequence GC content [title]
#| results: asis
create_header(fastqc_data, "per_sequence_gc_content")
```

```{r}
#| label: Per sequence GC content [content]
#| fig-width: 3
#| fig-height: 1.75

qcviz_colors <- get_color_palette()

data2plot <-
  fastqc_data$per_sequence_gc_content$content |>
  mutate(
    gc_content = as.numeric(gc_content),
    count = as.numeric(count)
  )

theoretical_data <-
  process_gc_data(data2plot)

data2plot <-
  data2plot |>
  mutate(group = 'Observed') |>
  bind_rows(
    theoretical_data$normal_distribution_df |>
      mutate(group = 'Theoretical')
  ) |>
  mutate(group = factor(group, levels = c('Theoretical', 'Observed')))

data2plot |>
  ggplot(aes(x = gc_content, y = count)) +
  geom_line(aes(color = group), linewidth = .5) +
  labs(
    x = "Mean GC content (%)",
    y = "Count (n)",
    color = NULL
  ) +
  scale_y_continuous(
    labels = format_large_numbers,
    expand = expansion(mult = .15)
  ) +
  scale_color_manual(
    values = c(
      "Observed" = fqcviz_colors$blue1,
      "Theoretical" = fqcviz_colors$warm_grey4
    )
  ) +
  scale_x_continuous(expand = c(0, 0)) +
  theme(
    legend.position = c(1, 1),
    legend.justification = c(1, 1),
    legend.key.spacing.y = unit(.1, "cm"),
    legend.key.height = unit(.1, "cm")
  )

```

:::

::: box
```{r}
#| label: Per base N content [title]
#| results: asis
create_header(fastqc_data, "per_base_n_content")
```

```{r}
#| label: Per base N content [content]
#| fig-width: 3
#| fig-height: 1.75

qcviz_colors <- get_color_palette()

data2plot <-
  fastqc_data$per_base_n_content$content |>
  separate(base, into = c('start', 'end'), sep = '-') |>
  mutate(across(c(start, end), as.numeric)) |>
  rowwise() |>
  mutate(base_numeric = mean(c(start, end), na.rm = TRUE)) |>
  transmute(
    base_numeric = base_numeric,
    n_count = as.numeric(n_count) / 100
  )


data2plot |>
  ggplot(aes(x = base_numeric, y = n_count)) +
  geom_line(linewidth = .5, color = fqcviz_colors$blue1) +
  labs(
    x = "Position in read (bp)",
    y = "N Content (%)",
    color = NULL
  ) +
  scale_y_continuous(
    limits = c(0, 1),
    breaks = seq(0, 1, .25),
    label = scales::percent,
    expand = expansion(mult = .15)
  ) +
  theme(
    legend.position = c(1, 1),
    legend.justification = c(1, 1),
    legend.key.spacing.y = unit(.1, "cm"),
    legend.key.height = unit(.1, "cm")
  ) +
  scale_x_continuous(
    limits = c(0, max(data2plot$base_numeric)),
    breaks = as.integer(seq(min(data2plot$base_numeric) - 1, max(data2plot$base_numeric), length.out = 5)),
    expand = c(0, 0)
  )


```

:::


::: box
```{r}
#| label: Sequence Length Distribution [title]
#| results: asis
create_header(fastqc_data, "sequence_length_distribution")
```

```{r}
#| label: Sequence Length Distribution [content]
#| fig-width: 3
#| fig-height: 1.75

qcviz_colors <- get_color_palette()

data2plot <-
  fastqc_data$sequence_length_distribution$content |>
  transmute(
    length = as.numeric(length),
    count = as.numeric(count)
  )


data2plot |>
  ggplot(aes(x = length, y = count)) +
  geom_col(fill = fqcviz_colors$blue1) +
  labs(
    x = "Sequence Length (bp)",
    y = "Sequences (N)",
    color = NULL
  ) +
  scale_y_continuous(
    label = format_large_numbers,
    expand = c(0,0)
  ) +
  theme(
    legend.position = c(1, 1),
    legend.justification = c(1, 1),
    legend.key.spacing.y = unit(.1, "cm"),
    legend.key.height = unit(.1, "cm")
  ) +
  scale_x_continuous(
    expand = expansion(add = 3),
    breaks = seq(min(data2plot$length), max(data2plot$length), 1)
  )


```

:::


::: box
```{r}
#| label: Sequence duplication levels [title]
#| results: asis
create_header(fastqc_data, "sequence_duplication_levels")
```

```{r}
#| label: Sequence duplication levels [content]
#| fig-width: 3
#| fig-height: 1.75

qcviz_colors <- get_color_palette()

data2plot <-
  fastqc_data$sequence_duplication_levels$content |>
  transmute(
    duplication_level = fct_reorder(duplication_level, row_number()),
    percentage_of_total = as.numeric(percentage_of_total) / 100
  )


data2plot |>
  ggplot(aes(y = duplication_level, x = percentage_of_total)) +
  geom_col(fill = fqcviz_colors$blue1) +
  labs(
    y = "Sequence Duplication Level",
    x = "Sequences (%)",
  ) +
  scale_x_continuous(
    expand = c(0, 0),
    limits = c(0, 1),
    label = scales::percent,
  ) +
  geom_text(
    data = subset(data2plot, percentage_of_total == max(percentage_of_total)),
    aes(label = scales::percent(percentage_of_total, accuracy = 0.01)),
    hjust = 1.1,
    size = 2,
    color = "white"
  ) +
  geom_text(
    data = subset(data2plot, percentage_of_total != max(percentage_of_total) & percentage_of_total > 0),
    aes(label = scales::percent(percentage_of_total, accuracy = 0.01)),
    hjust = -0.1,
    size = 2,
    color = fqcviz_colors$warm_grey2
  ) +
  scale_y_discrete(
    expand = expansion(add = c(1.5,0))
  ) +
  theme(
    legend.position = c(1, 1),
    legend.justification = c(1, 1),
    legend.key.spacing.y = unit(.1, "cm"),
    legend.key.height = unit(.1, "cm"),
    axis.text.y = element_text(hjust = 0, size = 6),
    panel.grid.major.x = ggplot2::element_line(
      linewidth = .3,
      color = fqcviz_colors[["warm_grey5"]]
    ),
    panel.grid.major.y = ggplot2::element_blank()
  ) 

```

:::



::: {.box .overrepresented-sequences}
```{r}
#| label: Overrepresented sequences [title]
#| results: asis
create_header(fastqc_data, "overrepresented_sequences")
```

```{r}
#| label: Overrepresented sequences [content]
#| fig-width: 3
#| fig-height: 1.75

qcviz_colors <- get_color_palette()


```

<span id="overrepresented-sequences-count">`{r} length(fastqc_data$overrepresented_sequences$content)`</span> sequences

:::

::: {.box }

```{r}
#| label: Adapter content [title]
#| results: asis
create_header(fastqc_data, "adapter_content")
```

```{r}
#| label: Adapter content [content]
#| fig-width: 3
#| fig-height: 1.75

qcviz_colors <- get_color_palette()

data2plot <-
  fastqc_data$adapter_content$content |>
  pivot_longer(
    cols = -position,
    names_to = "adapter",
    values_to = "percentage_of_total"
  ) |>
  mutate(
    percentage_of_total = as.numeric(percentage_of_total) / 100,
    position = as.numeric(position)
  )


data2plot |>
  ggplot(aes(y = percentage_of_total, x = position)) +
  geom_line(aes(color = adapter), linewidth = .5) +
  labs(
    y = "Adapter Content (%)",
    x = "Position in read (bp)",
    color = NULL
  ) +
  scale_y_continuous(
    expand = expansion(mult = .15),
    limits = c(0, 1),
    label = scales::percent,
  ) +
  scale_x_continuous(
    expand = c(0,0),
    limits = c(0, max(data2plot$position)),
    breaks = as.integer(seq(0, max(data2plot$position), length.out = 5)),
  ) +
  theme(
    legend.position = c(1, 1),
    legend.justification = c(1, 1),
    legend.key.spacing.y = unit(.1, "cm"),
    legend.key.height = unit(.1, "cm"),
    legend.text = element_text(size = 6),
    axis.text.y = element_text(hjust = 0, size = 6),
  ) +
  ggsci::scale_color_lancet(label = function(x) stringr::str_replace_all(x, "_", " ") |> stringr::str_to_title())

```

:::





<!-- End grid container -->
:::::::