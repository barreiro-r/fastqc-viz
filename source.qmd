---
title: fastqc-viz
title-block-banner: false

format:
  html:
    mainfont: "DM Sans"
   
execute: 
  warning: false
  message: false
  echo: false

sidebar: false
---

```{r}
#| label: load functions
library(tidyverse)
purrr::walk(list.files("R", pattern = "\\.R$", full.names = TRUE), source)
theme_set_fastqcviz()
```

```{r}
#| label: load and parse fasqc data
fastqc_data <-
  parse_fastqc(fastq_data_file = "output/fastqc_reports/SRR1517848_2_fastqc.txt")
```

::::::: grid-container
::: {.box .sidebox}

![](images/logo-light.svg){width=100%, id="logo"}

-------------

```{r}
#| label: Status summary
#| results: asis
plot_status_summary(fastqc_data) 

```

```{r}
#| label: Basic Statistics [title]
#| results: asis

# create_header(fastqc_data, "basic_statistics")
```

------

```{r}
#| label: Basic Statistics
#| results: asis
plot_basic_statistics(fastqc_data)
```

:::

::: box
```{r}
#| label: Per base sequence quality [title]
#| results: asis
create_header(fastqc_data, "per_base_sequence_quality")
```

```{r}
#| label: Per base sequence quality [content]
#| fig-width: 3
#| fig-height: 1.75

plot_per_base_sequence_quality(fastqc_data)
```

:::

::: box
```{r}
#| label: Per base sequence content [title]
#| results: asis
create_header(fastqc_data, "per_sequence_quality_scores")
```

```{r}
#| label: Per base sequence content [content]
#| fig-width: 3
#| fig-height: 1.75

plot_per_sequence_quality_scores(fastqc_data)
```

:::

::: box
```{r}
#| label: Per Base Sequence Content [title]
#| results: asis
create_header(fastqc_data, "per_base_sequence_content")
```

```{r}
#| label: Per Base Sequence Content [content]
#| fig-width: 3
#| fig-height: 1.75

plot_per_base_sequence_content(fastqc_data)
```

:::

::: box
```{r}
#| label: Per sequence GC content [title]
#| results: asis
create_header(fastqc_data, "per_sequence_gc_content")
```

```{r}
#| label: Per sequence GC content [content]
#| fig-width: 3
#| fig-height: 1.75

plot_per_sequence_gc_content(fastqc_data)
```

:::

::: box
```{r}
#| label: Per base N content [title]
#| results: asis
create_header(fastqc_data, "per_base_n_content")
```

```{r}
#| label: Per base N content [content]
#| fig-width: 3
#| fig-height: 1.75

plot_per_base_n_content(fastqc_data)
```

:::


::: box
```{r}
#| label: Sequence Length Distribution [title]
#| results: asis
create_header(fastqc_data, "sequence_length_distribution")
```

```{r}
#| label: Sequence Length Distribution [content]
#| fig-width: 3
#| fig-height: 1.75

plot_sequence_length_distribution(fastqc_data)
```

:::


::: box
```{r}
#| label: Sequence duplication levels [title]
#| results: asis
create_header(fastqc_data, "sequence_duplication_levels")
```

```{r}
#| label: Sequence duplication levels [content]
#| fig-width: 3
#| fig-height: 1.75

plot_sequence_duplication_levels(fastqc_data)
```

:::



::: {.box .overrepresented-sequences}
```{r}
#| label: Overrepresented sequences [title]
#| results: asis
create_header(fastqc_data, "overrepresented_sequences")
```

```{r}
#| label: Overrepresented sequences [content]
#| fig-width: 3
#| fig-height: 1.75

qcviz_colors <- get_color_palette()


```

<span id="overrepresented-sequences-count">`{r} length(fastqc_data$overrepresented_sequences$content)`</span> sequences

:::

::: {.box }

```{r}
#| label: Adapter content [title]
#| results: asis
create_header(fastqc_data, "adapter_content")
```

```{r}
#| label: Adapter content [content]
#| fig-width: 3
#| fig-height: 1.75

qcviz_colors <- get_color_palette()

data2plot <-
  fastqc_data$adapter_content$content |>
  pivot_longer(
    cols = -position,
    names_to = "adapter",
    values_to = "percentage_of_total"
  ) |>
  mutate(
    percentage_of_total = as.numeric(percentage_of_total) / 100,
    position = as.numeric(position)
  )


data2plot |>
  ggplot(aes(y = percentage_of_total, x = position)) +
  geom_line(aes(color = adapter), linewidth = .5) +
  labs(
    y = "Adapter Content (%)",
    x = "Position in read (bp)",
    color = NULL
  ) +
  scale_y_continuous(
    expand = expansion(mult = .15),
    limits = c(0, 1),
    label = scales::percent,
  ) +
  scale_x_continuous(
    expand = c(0,0),
    limits = c(0, max(data2plot$position)),
    breaks = as.integer(seq(0, max(data2plot$position), length.out = 5)),
  ) +
  theme(
    legend.position = c(1, 1),
    legend.justification = c(1, 1),
    legend.key.spacing.y = unit(.1, "cm"),
    legend.key.height = unit(.1, "cm"),
    legend.text = element_text(size = 6),
    axis.text.y = element_text(hjust = 0, size = 6),
  ) +
  ggsci::scale_color_lancet(label = function(x) stringr::str_replace_all(x, "_", " ") |> stringr::str_to_title())

```

:::





<!-- End grid container -->
:::::::